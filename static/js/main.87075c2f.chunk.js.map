{"version":3,"sources":["components/Modal/ModalSubContent.js","components/Modal/ModalContent.js","components/Modal/ModalTrigger.js","components/Modal/Modal.js","components/Table/Table.js","components/Pagination/Pagination.js","App.js","serviceWorker.js","index.js"],"names":["ModalSubContent","content","modalRef","buttonRef","closeModal","className","ref","id","first_name","last_name","email","src","avatar","aria-label","aria-labelledby","onClick","ModalContent","ReactDOM","createPortal","tag","role","tabIndex","aria-modal","this","props","onClickOutside","onKeyDown","document","body","Component","ModalTrigger","showModal","triggerText","Modal","setState","isShown","closeButton","focus","TriggerButton","event","keyCode","modal","contains","target","state","Fragment","n","modalProps","modalContent","Table","Users","scope","map","user","index","key","Pagination","pageNumbers","getUserData","setCurrentPage","currentPage","page","App","lastPageLoaded","i","fetch","then","response","json","users","tempUserArray","JSON","parse","stringify","totalUsers","console","log","temp","concat","data","total","getCurrentPageUser","tempCurrentPageUsers","splice","currentPageUsers","Math","ceil","push","Boolean","window","location","hostname","match","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87075c2f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ModalContent.css'\r\n\r\nconst  ModalSubContent = ({content, modalRef, buttonRef, closeModal}) => {\r\n    return(\r\n          <div className=\"modal-area\" ref={modalRef}>\r\n            <div className=\"modal-body\">\r\n              <div className=\"details\">\r\n                <div>\r\n                  <p className=\"title\">Id</p>\r\n                  <div className=\"divider\" ></div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"detail\">{content.id}</p>\r\n                  <div className=\"divider\" ></div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"title\">Name</p>\r\n                  <div className=\"divider\" ></div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"detail\">{`${content.first_name} ${content.last_name}`}</p>\r\n                  <div className=\"divider\" ></div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"title\">Email</p>\r\n                  <div className=\"divider\" ></div>\r\n                </div>\r\n                <div>\r\n                  <p className=\"detail\">{content.email}</p> \r\n                  <div className=\"divider\" ></div>\r\n                </div>            \r\n              </div>\r\n              <div className=\"photo-btn\">\r\n                <img src={content.avatar} className=\"modal-img\"/>\r\n                <button\r\n                  ref={buttonRef}\r\n                  aria-label=\"Close Modal\"\r\n                  aria-labelledby=\"close-modal\"\r\n                  className=\"close\"\r\n                  onClick={closeModal}\r\n                  >\r\n                  Close\r\n                </button>\r\n              </div> \r\n            </div>\r\n          </div>\r\n    );\r\n}\r\n\r\nexport default ModalSubContent;\r\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport FocusTrap from 'focus-trap-react';\r\nimport ModalSubContent from './ModalSubContent'\r\nimport './ModalContent.css'\r\n\r\nexport class ModalContent extends Component {\r\n  render() {\r\n    return ReactDOM.createPortal(\r\n      <FocusTrap>\r\n        <aside\r\n          tag=\"aside\"\r\n          role=\"dialog\"\r\n          tabIndex=\"-1\"\r\n          aria-modal=\"true\"\r\n          className=\"modal-cover\"\r\n          onClick={this.props.onClickOutside}\r\n          onKeyDown={this.props.onKeyDown}\r\n        >\r\n          <ModalSubContent content={this.props.content} modalRef={this.props.modalRef} buttonRef={this.props.buttonRef} closeModal={this.props.closeModal} />\r\n        </aside>\r\n      </FocusTrap>,\r\n      document.body\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalContent;\r\n","import React, { Component } from 'react';\r\nclass ModalTrigger extends Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        ref={this.props.buttonRef}\r\n        onClick={this.props.showModal}\r\n        className=\"modal-button\" \r\n      >\r\n        {this.props.triggerText}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalTrigger;\r\n","import React, { Component } from 'react';\r\nimport ModalContent from './ModalContent';\r\nimport ModalTrigger from './ModalTrigger';\r\nexport class Modal extends Component { \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isShown: false\r\n    };\r\n  }\r\n  showModal = () => {\r\n    this.setState({ isShown: true }, () => {\r\n      this.closeButton.focus();\r\n    });\r\n    \r\n  };\r\n  closeModal = () => {\r\n    this.setState({ isShown: false });\r\n    this.TriggerButton.focus();\r\n    \r\n  };\r\n  onKeyDown = event => {\r\n    if (event.keyCode === 27) {\r\n      this.closeModal();\r\n    }\r\n  };\r\n  onClickOutside = event => {\r\n    if (this.modal && this.modal.contains(event.target)) return;\r\n    this.closeModal();\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ModalTrigger\r\n          showModal={this.showModal}\r\n          buttonRef={n => (this.TriggerButton = n)}\r\n          triggerText={this.props.modalProps.triggerText}\r\n        />\r\n        {this.state.isShown ? (\r\n          <ModalContent\r\n            modalRef={n => (this.modal = n)}\r\n            buttonRef={n => (this.closeButton = n)}\r\n            closeModal={this.closeModal}\r\n            content={this.props.modalContent}\r\n            onKeyDown={this.onKeyDown}\r\n            onClickOutside={this.onClickOutside}\r\n          />\r\n        ) : (\r\n          <React.Fragment />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport Modal from '../Modal/Modal'\r\nimport './Table.css';\r\n\r\nconst Table = ({Users}) => { \r\n\tconst modalProps = {triggerText: 'More Details'};\r\n\treturn(\r\n\t\t   <table>\r\n\t\t\t  <caption>Userlist.io</caption>\r\n\t\t\t  <thead>\r\n\t\t\t    <tr>\r\n\t\t\t      <th scope=\"col\">Avatar</th>\r\n\t\t\t      <th scope=\"col\">Name</th>\r\n\t\t\t      <th scope=\"col\">Action</th>\r\n\t\t\t    </tr>\r\n\t\t\t  </thead>\r\n\t\t\t  <tbody>\r\n\t\t\t  \t{\r\n\t\t\t  \t\tUsers.map((user, index) => {\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<tr key={index}>\r\n  \t\t\t\t\t        \t<td ><img src={user.avatar} /></td> \r\n  \t\t\t\t\t        \t<td className=\"table-content\" >{user.first_name}</td>\r\n  \t\t\t\t\t        \t<td ><Modal modalProps={modalProps} modalContent={user} /></td>\r\n\t\t            \t\t</tr>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t  </tbody>\r\n\t\t\t</table>\r\n\t\t)\r\n}\r\n\r\nexport default Table;\r\n\r\n","import React from 'react';\r\nimport './Pagination.css' \r\n\r\nconst Pagination = ({pageNumbers, getUserData, setCurrentPage, currentPage}) => { \r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tpageNumbers.map((page, index) =>{\r\n\t\t\t\t\tif (currentPage === index+1) {\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<button onClick={() => {\r\n\t\t\t\t\t\t\t\tgetUserData(page);\r\n\t\t\t\t\t\t\t\tsetCurrentPage(page);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tclassName=\"page-btn highlight\"\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{page}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<button onClick={() => {\r\n\t\t\t\t\t\t\t\tgetUserData(page);\r\n\t\t\t\t\t\t\t\tsetCurrentPage(page);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tclassName=\"page-btn \"\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{page}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Pagination;\r\n\r\n\r\n\r\n\t\t\t\t","import React, {Component} from 'react';\nimport Table from './components/Table/Table'\nimport Pagination from './components/Pagination/Pagination'\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state={\n      totalUsers: [],\n      currentPageUsers: [],\n      total: null,\n      currentPage:1,\n      lastPageLoaded:0\n    }\n  }\n\n  componentDidMount(){\n    this.getUserData(1);\n  }\n\n  getUserData = (page) => {\n    if (this.state.lastPageLoaded < page) {\n      for (var i = this.state.lastPageLoaded +1; i <= page; i++) {\n        fetch(`https://reqres.in/api/users?page=${i}`)\n        .then(response => response.json())\n        .then(users => {\n          this.setState({lastPageLoaded: page})\n          let tempUserArray = JSON.parse(JSON.stringify(this.state.totalUsers));\n          console.log(tempUserArray, \"tempUserArray\")\n          let temp = tempUserArray.concat(users.data);\n          console.log(temp, \"temp\")\n          this.setState({totalUsers: temp, total: users.total }, () => this.getCurrentPageUser(page))\n        });\n      }\n  }\n    else{\n        fetch(`https://reqres.in/api/users?page=${page}`)\n        .then(response => response.json())\n        .then(users => {\n          this.setState({lastPageLoaded: page})\n          let tempUserArray = JSON.parse(JSON.stringify(this.state.totalUsers));\n          console.log(tempUserArray, \"tempUserArray\")\n          let temp = tempUserArray.concat(users.data);\n          console.log(temp, \"temp\")\n          this.setState({totalUsers: temp, total: users.total }, () => this.getCurrentPageUser(page))\n        });\n    }\n  }\n\n  getCurrentPageUser = (page) => {\n    let tempUsers = JSON.parse(JSON.stringify(this.state.totalUsers));\n    let tempCurrentPageUsers = tempUsers.splice((page-1)*3, 3)\n    this.setState({currentPageUsers: tempCurrentPageUsers})\n  }\n\n  setCurrentPage = (page) => {\n    this.setState({currentPage: page}, () => console.log(this.state.currentPage))  \n  }\n\n  render(){\n\n    const pageNumbers = [];\n\n    if (this.state.total !== null) {\n      for (let i = 1; i <= Math.ceil(this.state.total / 3); i++) {\n        pageNumbers.push(i);\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Table Users={this.state.currentPageUsers}  />\n          <Pagination pageNumbers={pageNumbers} getUserData={this.getUserData} setCurrentPage={this.setCurrentPage} currentPage={this.state.currentPage}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}